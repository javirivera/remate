{
  "name": "postcss-custom-properties",
  "version": "3.3.0",
  "description": "PostCSS plugin to polyfill W3C CSS Custom Properties for cascading variables",
  "keywords": [
    "css",
    "postcss",
    "postcss-plugin",
    "custom-properties",
    "variables",
    "vars"
  ],
  "author": {
    "name": "Maxime Thirouin"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/postcss/postcss-custom-properties.git"
  },
  "files": [
    "CHANGELOG.md",
    "LICENSE",
    "index.js"
  ],
  "dependencies": {
    "balanced-match": "~0.1.0",
    "object-assign": "^2.0.0",
    "postcss": "^4.1.4",
    "postcss-message-helpers": "^2.0.0"
  },
  "devDependencies": {
    "eslint": "^0.18.0",
    "tape": "^4.0.0"
  },
  "scripts": {
    "test": "eslint . && tape test"
  },
  "readme": "# postcss-custom-properties [![Build Status](https://travis-ci.org/postcss/postcss-custom-properties.png)](https://travis-ci.org/postcss/postcss-custom-properties)\n\n> [PostCSS](https://github.com/postcss/postcss) plugin to transform [W3C CSS Custom Properties for cascading variables](http://www.w3.org/TR/css-variables/) syntax to more compatible CSS.\n\n**N.B.** The transformation _is not complete_. It currently just aims to provide a future-proof way of using a **limited subset (to top-level `:root` selector)** of the features provided by native CSS custom properties.  \nRead [#1](https://github.com/postcss/postcss-custom-properties/issues/1) & [#9](https://github.com/postcss/postcss-custom-properties/issues/9) to know why this limitation exists.\n\nWorks great with [postcss-calc](https://github.com/postcss/postcss-calc).\n\n## Installation\n\n```console\n$ npm install postcss-custom-properties\n```\n\n## Usage\n\n```js\n// dependencies\nvar fs = require(\"fs\")\nvar postcss = require(\"postcss\")\nvar customProperties = require(\"postcss-custom-properties\")\n\n// css to be processed\nvar css = fs.readFileSync(\"input.css\", \"utf8\")\n\n// process css using postcss-custom-properties\nvar output = postcss()\n  .use(customProperties())\n  .process(css)\n  .css\n```\n\nUsing this `input.css`:\n\n```css\n:root {\n  --color: red;\n}\n\ndiv {\n  color: var(--color);\n}\n```\n\nyou will get:\n\n```css\ndiv {\n  color: red;\n}\n```\n\nCheckout [tests](test) for more.\n\n### Options\n\n#### `strict` (default: `true`)\n\nPer specifications, all fallbacks should be added since we can't verify if a\ncomputed value is valid or not.\nThis option allows you to avoid adding too many fallback values in your CSS.\n\n#### `preserve` (default: `false`)\n\nAllows you to preserve custom properties & var() usage in output.\n\n```js\nvar out = postcss()\n  .use(customProperties({preserve: true}))\n  .process(css)\n  .css\n```\n\nYou can also set `preserve: \"computed\"` to get computed resolved custom properties in the final output.\nHandy to make them available to your JavaScript.\n\n#### `variables` (default: `{}`)\n\nAllows you to pass an object of variables for `:root`. These definitions will override any that exist in the CSS.\nThe keys are automatically prefixed with the CSS `--` to make it easier to share\nvariables in your codebase.\n\n### `appendVariables` (default: `false`)\n\nIf `preserve` is set to `true` (or `\"computed\"`), allows you to append your variables at then of your CSS.\n\n---\n\n## Contributing\n\nWork on a branch, install dev-dependencies, respect coding style & run tests before submitting a bug fix or a feature.\n\n```console\n$ git clone https://github.com/postcss/postcss-custom-properties.git\n$ git checkout -b patch-1\n$ npm install\n$ npm test\n```\n\n## [Changelog](CHANGELOG.md)\n\n## [License](LICENSE)\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/postcss/postcss-custom-properties/issues"
  },
  "homepage": "https://github.com/postcss/postcss-custom-properties",
  "_id": "postcss-custom-properties@3.3.0",
  "_from": "postcss-custom-properties@^3.0.0"
}
