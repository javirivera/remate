{
  "name": "htmlclean",
  "version": "2.6.4",
  "title": "htmlclean",
  "description": "Simple and lightweight cleaner that just removes whitespaces, comments, etc. to minify HTML/SVG. This differs from others in that this removes whitespaces, line-breaks, etc. as much as possible.",
  "keywords": [
    "html",
    "svg",
    "clean",
    "whitespace",
    "linebreak",
    "comment",
    "minify",
    "compress",
    "lightweight"
  ],
  "main": "./lib/htmlclean.js",
  "bin": {
    "htmlclean": "./bin/htmlclean"
  },
  "engines": {
    "node": ">= 0.8.0"
  },
  "dependencies": {
    "commander": "^2.6.0",
    "glob": "~4.4.0"
  },
  "homepage": "https://github.com/anseki/htmlclean",
  "repository": {
    "type": "git",
    "url": "git://github.com/anseki/htmlclean.git"
  },
  "bugs": {
    "url": "https://github.com/anseki/htmlclean/issues"
  },
  "license": "MIT",
  "author": {
    "name": "anseki",
    "url": "https://github.com/anseki"
  },
  "readme": "# htmlclean\n\n* [Grunt](http://gruntjs.com/) plugin: [grunt-htmlclean](https://github.com/anseki/grunt-htmlclean)\n* [gulp](http://gulpjs.com/) plugin: [gulp-htmlclean](https://github.com/anseki/gulp-htmlclean)\n\nSimple and lightweight cleaner that just removes whitespaces, comments, etc. to minify HTML/SVG.  \nThis differs from others in that this removes whitespaces, line-breaks, etc. as much as possible.\n\n## Removing\nhtmlclean removes the following texts.\n\n+ The leading whitespaces, tabs and line-breaks, and the trailing whitespaces, tabs and line-breaks.\n+ The unneeded whitespaces, tabs and line-breaks between HTML/SVG tags.\n+ The more than two whitespaces, tabs and line-breaks (suppressed to one space).\n+ HTML/SVG comments.\n\nFor example: The more than two whitespaces (even if those are divided by HTML/SVG tags) in a line are suppressed.\n\n* Before\n\n```html\n<p>The <strong> clean <span> <em> HTML is here. </em> </span> </strong> </p>\n```\n\n* After\n\n```html\n<p>The <strong>clean <span><em>HTML is here.</em></span></strong></p>\n```\n\nThe whitespace that was right side of `<strong>` was removed, and the left side was kept.  \nThe both side whitespaces of `<em>` were removed.\n\n## Protecting\n\nThe following texts are protected (excluded from [Removing](#removing)).\n\n+ The texts in `textarea`, `script` and `style` elements, and the text nodes in `pre` elements.\n+ The quoted texts in the tag attributes.\n+ The texts in the SSI tags (PHP, JSP, ASP/ASP.NET and Apache SSI).\n+ IE conditional comments. e.g. `<!--[if lt IE 7]>`\n+ The texts between `<!--[htmlclean-protect]-->` and `<!--[/htmlclean-protect]-->`.\n+ The texts that is matched by the [`protect`](#protect) option.\n\n## Installation\n\n```shell\nnpm install -g htmlclean\n```\n\n## Command Line Tool\n\n```shell\nhtmlclean [options] [input1 [input2 ...]]\n```\n\nCommand line tool needs `-g` option when install package.  \nSee `htmlclean -h` for usage.\n\n### Examples\n\n* Clean `index.html`, and write to `index.min.html`.\n\n```shell\nhtmlclean index.html\n```\n\n* Clean `index.html`, and overwrite it.\n\n```shell\nhtmlclean index.html -o index.html\n```\n\n* Clean all HTML files in `src` directory, and write into `public` directory.\n\n```shell\nhtmlclean src -o public\n```\n\n* Clean all SVG files.\n\n```shell\nhtmlclean *.svg\n```\n\n* Get and clean web page on URL, and write to `index.html`.\n\n```shell\nwget -q -O - https://github.com/ | htmlclean -o index.html\n```\n\n* Clean and compress `index.html`, and write to `index.gz`.\n\n```shell\nhtmlclean index.html -o - | gzip > index.gz\n```\n\n* Clean 3 files, and write into 1 file.\n\n```shell\nhtmlclean -i head.html -i body.html -i foot.html \\\n-o index.html -o index.html -o index.html\n```\n\n### Drag & Drop & Clean\n\nIn the GUI environment, drag-and-drop the target file or directory or multiple items to the `htmlclean` icon. Or the short cut (alias, link, etc.) icon on the desktop also works.  \n![desktop](gui.png)\n\nThe `htmlclean` icon is found in:\n\n```shell\nnpm bin -g\n```\n\n## Node Module\n\n```js\ncleanHtml = htmlclean(sourceHtml[, options])\n```\n\n`require('htmlclean')` returns a Function. This Function accepts a source HTML, and returns a clean HTML. If you want, you can specify an `options` Object to second argument (see [Options](#options)).\n\n```js\nvar htmlclean = require('htmlclean');\nhtml = htmlclean(html);\n\n// Or\nhtml = require('htmlclean')(html);\n```\n\n### Options\n\nYou can specify an `options` Object to second argument. This Object can have following properties.\n\n#### `protect`\n\nType: RegExp or Array\n\nThe texts which are matched to this RegExp are protected in addition to above [Protecting](#protecting) list. The multiple RegExps can be specified via an Array.\n\n#### `unprotect`\n\nType: RegExp or Array\n\nThe texts which are matched to this RegExp are cleaned even if that text is included in above [Protecting](#protecting) list. The multiple RegExps can be specified via an Array.  \nFor example, a HTML as template in `<script type=\"text/x-handlebars-template\">` is cleaned via following.\n\n```js\nhtml = htmlclean(html, {\n  unprotect: /<script [^>]*\\btype=\"text\\/x-handlebars-template\"[\\s\\S]+?<\\/script>/ig\n});\n```\n\nThe `x-handlebars-template` in a `type` attribute above is case of using the Template Framework [Handlebars](http://handlebarsjs.com/). e.g. [AngularJS](https://angularjs.org/) requires `ng-template` instead of it.\n\n*NOTE:* The RegExp has to match to a text which is not a part of the protected text. For example, the RegExp matches `color: red;` in `<style>` element, but this is not cleaned because all texts in the `<style>` element are protected. `color: red;` is a part of the protected text. The RegExp has to match to a text which is all of `<style>` element like `/<style[\\s\\S]+?<\\/style>/`.\n\n#### `edit`\n\nType: Function\n\nThis Function more edits a HTML.  \nThe protected texts are hidden from a HTML, and a HTML is passed to this Function. Therefore, this Function doesn't break the protected texts. A HTML which returned from this Function is restored.  \n*NOTE:* The markers `\\fID\\f` (`\\f` is \"form feed\" `\\x0C` code, `ID` is number) are inserted to a HTML instead of the protected texts. This Function can remove these markers, but can't add new markers. (Invalid markers will be just removed.)\n\n### Example\n\nSee the source HTML file and the result HTML files in the `sample` directory.\n\n```js\nvar htmlclean = require('htmlclean'),\n  fs = require('fs'),\n  htmlBefore = fs.readFileSync('./before.html', {encoding: 'utf8'});\n\nvar htmlAfter1 = htmlclean(htmlBefore);\nfs.writeFileSync('./after1.html', htmlAfter1);\n\nvar htmlAfter2 = htmlclean(htmlBefore, {\n  protect: /<\\!--%fooTemplate\\b.*?%-->/g,\n  unprotect: /<script [^>]*\\btype=\"text\\/x-handlebars-template\"[\\s\\S]+?<\\/script>/ig,\n  edit: function(html) { return html.replace(/\\begg(s?)\\b/ig, 'omelet$1'); }\n});\nfs.writeFileSync('./after2.html', htmlAfter2);\n```\n\n## Note\n\n### Malformed Nested Tags, and Close Tags in Script\n\nhtmlclean can't parse the malformed nested tags like `<p>foo<pre>bar</p>baz</pre>` precisely. And the close tags in script like `<script>var foo = '</script>';</script>` too. Or, `?>` in PHP code, etc.  \nSome language parsers also mistake, then those recommend us to write code like `'<' + '/script>'`. This is better even if htmlclean is not used.\n\n### SSI Tags in HTML Comments\n\nhtmlclean removes the HTML/SVG comments that include the SSI tag like `<!-- Info for admin - Foo:<?= expression ?> -->`. I think it's no problem because htmlclean is used to minify HTML. If that SSI tag includes the important code for logic, use a `protect` option, or `<!--[htmlclean-protect]-->` and `<!--[/htmlclean-protect]-->`.\n\n## See Also\n\nIf you want to control details of editing, [HtmlCompressor](http://code.google.com/p/htmlcompressor/), [HTMLMinifier](https://github.com/kangax/html-minifier) and others are better choice.\n",
  "readmeFilename": "README.md",
  "_id": "htmlclean@2.6.4",
  "_from": "htmlclean@~2.6.3"
}
